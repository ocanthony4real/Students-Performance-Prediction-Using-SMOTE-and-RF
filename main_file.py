# -*- coding: utf-8 -*-
"""Project_004_RF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ImpX1Lt5EW5ztsNzOUjwV_1sTdWowgeM
"""

from google.colab import drive
drive.mount('/content/gdrive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('/content/gdrive/MyDrive/NancyProject/dataset.csv')

df_new = df.drop(axis=1, columns=['Curricular units 1st sem (credited)',
        'Previous qualification',
       'Curricular units 1st sem (enrolled)',
       'Curricular units 1st sem (evaluations)',
       'Curricular units 1st sem (approved)',
       'Curricular units 1st sem (without evaluations)',
       'Curricular units 2nd sem (credited)',
       'Curricular units 2nd sem (enrolled)',
       'Curricular units 2nd sem (evaluations)',
       'Curricular units 2nd sem (approved)',
       'Curricular units 2nd sem (without evaluations)','International','Application mode', 'Application order',  'Target'])

conditions = [
    (df_new['Curricular units 1st sem (grade)'] >= 14.0),
    (df_new['Curricular units 1st sem (grade)'] >= 11.0) & (df_new['Curricular units 1st sem (grade)'] < 14.0),
    (df_new['Curricular units 1st sem (grade)'] >= 5.0) & (df_new['Curricular units 1st sem (grade)'] < 11.0),
    (df_new['Curricular units 1st sem (grade)'] >= 0.0) & (df_new['Curricular units 1st sem (grade)'] < 5.0),
]

choices = [0, 1, 2, 3]

df_new['1st sem Grade remark'] = np.select(conditions, choices, default='null')

df_new['1st sem Grade remark'] = df_new['1st sem Grade remark'].astype(int)

df_new = df_new.drop(axis=1, columns=['Curricular units 2nd sem (grade)','Curricular units 1st sem (grade)'])

df_new

df_new.columns

X = df_new.iloc[:,0:18]
y = df_new.iloc[:,18:]

# from sklearn import preprocessing
# X = preprocessing.normalize(X)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size=0.3, shuffle=True)

y_train = np.array(y_train).flatten()
rf_model = RandomForestClassifier().fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)
confusion_matrix(y_test, y_pred_rf)

print(classification_report(y_test, y_pred_rf))

accuracy_score(y_test, y_pred_rf)

import seaborn as sns
sns.scatterplot(x="Mother's occupation", y = '1st sem Grade remark', data=df_newest, hue='1st sem Grade remark', palette=['green','orange','brown','dodgerblue','red'])

count = 0
for i in df_newest['1st sem Grade remark']:
  if i == 0:
    count += 1
count

count = 0
for i in df_newest['1st sem Grade remark']:
  if i == 1:
    count += 1
count

count = 0
for i in df_newest['1st sem Grade remark']:
  if i == 2:
    count += 1
count

count = 0
for i in df_newest['1st sem Grade remark']:
  if i == 3:
    count += 1
count



"""# With SMOTE

"""

from imblearn.over_sampling import SMOTE

df_newest_filtered = df_new
# df_newest_res = df_newest_res[df_newest_res['1st sem Grade remark']==2]
df_newest_filtered = df_newest_filtered[(df_newest_filtered['1st sem Grade remark'] == 0) | (df_newest_filtered['1st sem Grade remark'] == 1) | (df_newest_filtered['1st sem Grade remark'] == 2) | (df_newest_filtered['1st sem Grade remark'] == 3)]
df_newest_filtered.shape

X_newest = df_newest_filtered.iloc[:,0:18]
y_newest = df_newest_filtered.iloc[:,18:]

sm = SMOTE(random_state=42, k_neighbors=2)



X_res, y_res = sm.fit_resample(X_newest, y_newest)

df_newest_res = pd.concat([X_res, y_res], axis = 1)

df_newest_dropped = df_new[(df_new['1st sem Grade remark'] != 0) & (df_new['1st sem Grade remark'] != 1) & (df_newest_filtered['1st sem Grade remark'] != 2) & (df_newest_filtered['1st sem Grade remark'] != 3)]

df_newest_dropped.shape

df_newest = pd.concat([df_newest_dropped, df_newest_res], axis = 0)
df_newest.shape

grade_0 = 0
for i in df_newest['1st sem Grade remark']:
  if i == 0:
    grade_0 += 1
grade_0

grade_1 = 0
for i in df_newest['1st sem Grade remark']:
  if i == 1:
    grade_1 += 1
grade_1

grade_2 = 0
for i in df_newest['1st sem Grade remark']:
  if i == 2:
    grade_2 += 1
grade_2

grade_3 = 0
for i in df_newest['1st sem Grade remark']:
  if i == 3:
    grade_3 += 1
grade_3

X = df_newest.iloc[:,0:18]
y = df_newest.iloc[:,18:]

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size=0.3, shuffle=True)

y_train = np.array(y_train).flatten()
rf_new_model = RandomForestClassifier().fit(X_train, y_train)

np.array(y_train).flatten().shape

y_pred_rf = rf_new_model.predict(X_test)
confusion_matrix(y_test, y_pred_rf)

print(classification_report(y_test, y_pred_rf))

accuracy_score(y_test, y_pred_rf)

